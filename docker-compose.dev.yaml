

x-app-defaults:
  &app_defaults
  build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements_dev.txt
  init: true
  links:
    - cache
    - db_dev
  environment:
    REDIS_PORT: ${REDIS_PORT}
    REDIS_DB: ${REDIS_DB}             
    REDIS_BACKEND: ${REDIS_BACKEND}
    DEBUG: ${DEBUG}
  depends_on:
    - cache
    - db_dev

services:
  db_dev:
    networks:
      - notetify-net
    image: mysql:latest
    container_name: notetify_db_dev
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      timeout: 10s
      retries: 10
    restart: always
    volumes:
      - db-data-dev:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
      MYSQL_ROOT_USER: ${DATABASE_USERNAME}    
      MYSQL_ROOT_HOST: '%'   #${DATABASE_HOST} 
    ports:
      - "3307:3306"
    env_file:
      - .env.development

  worker:
    networks:
      - notetify-net
    <<: *app_defaults
    command: "python manage.py yroom"

  cache:
    networks:
      - notetify-net
    image: redis:latest
    container_name: notetify_redis
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements_dev.txt
    volumes:
      - "redis-data:/data"
    environment:
      REDIS_HOST: broker #${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_BACKEND: ${REDIS_BACKEND}
    expose:
      - 6379
    ports:
      - "6379:6379"
    env_file:
      - .env.development

  backend_dev:
    networks:
      - notetify-net
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements_dev.txt
    command: sh ./entrypoint.dev.sh
    container_name: notetify-backend_dev
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      db_dev:
        condition: service_healthy
    volumes:
      - ./backend:/app
    environment:
      UVICORN_RELOAD: true

      DJANGO_ENV: ${DJANGO_ENV}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}             
      REDIS_BACKEND: ${REDIS_BACKEND}
    env_file:
      - .env.development

  test:
    networks:
      - notetify-net
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements_dev.txt
    command: ["pytest"]
    depends_on:
      - db_dev
      - cache
    env_file:
      - .env.development

  frontend_dev:
    networks:
      - notetify-net
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: notetify-frontend_dev
    develop:
      watch:
        - action: rebuild
          path: package.json
        - path: ./Dockerfile
          action: rebuild
    ports:
      - "3000:3000"
    depends_on:
      backend_dev:
        condition: service_started
      db_dev:
        condition: service_healthy
    volumes:
      - ./frontend:/usr/src/app
      - node_modules_frontend:/usr/src/app/node_modules
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_BASE_URL: ${VITE_BASE_URL}
      VITE_WS_ORIGIN:  ${VITE_WS_ORIGIN}
    stdin_open: true
    tty: true
    command: ["sh", "entrypoint.sh"]
    env_file:
      - .env.development

networks:
  notetify-net:
    driver: bridge

volumes:
  redis-data:
  db-data-dev:
  node_modules_frontend:
