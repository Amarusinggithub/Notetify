
services:
  db_prod:
    networks:
      - notetify-net-prod
    image: mysql:latest
    container_name: notetify-db-prod
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      timeout: 10s
      retries: 10
    restart: always
    volumes:
      - db-data-prod:/var/lib/mysql
    ports:
      - "3307:3306"
    env_file:
      - .env.production

  backend_prod:
    networks:
      - notetify-net-prod
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        - REQUIREMENTS_FILE=requirements_prod.txt
    command: sh ./entrypoint.prod.sh
    container_name: notetify-backend-prod
    restart: always
    expose:
      - "8000:8000"
    depends_on:
      db_prod:
        condition: service_healthy
    # volumes:
    # - django_static-prod:/app/staticfiles
    #- media_volume-prod:/app/media
    env_file:
      - .env.production

  redis_prod:
    networks:
      - notetify-net-prod
    image: redis:latest
    container_name: notetify_redis-prod
    volumes:
      - "redis-data-prod:/data"          
    expose:
      - 6379
    ports:
      - "6379:6379"
    env_file:
      - .env.production

  frontend_prod:
    networks:
      - notetify-net-prod
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: notetify-frontend-prod
    command: ["true"]
    volumes:
      - static_volume-prod:/usr/src/app/dist
    env_file:
      - .env.production

  yroom_worker_prod:
    networks:
      - notetify-net-prod
    build:
      context: ./backend
    init: true
    links:
    - redis_prod
    - db_prod
    depends_on:
      redis_prod:
        condition: service_started
      db_prod:
        condition: service_healthy
    command: "python manage.py yroom"

  nginx:
    networks:
      - notetify-net-prod
    image: nginx:stable-alpine
    container_name: notetify-nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume-prod:/usr/share/nginx/html:ro
      #- django_static-prod:/usr/share/nginx/static:ro
      #- media_volume-prod:/usr/share/nginx/media:ro
    depends_on:
      backend_prod:
          condition: service_started
      frontend_prod:
          condition: service_started

networks:
  notetify-net-prod:
    driver: bridge

volumes:
  db-data-prod: {}
  redis-data-prod: {}
  static_volume-prod: {}
  # django_static-prod: {}
  #media_volume-prod:
