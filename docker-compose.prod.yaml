
services:
  db_prod:
    networks:
      - notetify-net-prod
    image: mysql:latest
    container_name: notetify-db-prod
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    restart: always
    volumes:
      - db-data-prod:/var/lib/mysql
    ports:
      - "3307:3306"
    env_file:
      - .env.production
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: notetify_db

  backend_prod:
    networks:
      - notetify-net-prod
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        - REQUIREMENTS_FILE=requirements_prod.txt
    command: sh ./entrypoint.prod.sh
    container_name: notetify-backend-prod
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      db_prod:
        condition: service_healthy
      redis_prod:
        condition: service_healthy
    env_file:
      - .env.production

  redis_prod:
    networks:
      - notetify-net-prod
    image: redis:latest
    container_name: notetify_redis_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 10
    restart: always
    depends_on:
      db_prod:
        condition: service_healthy
    volumes:
      - "redis-data-prod:/data"          
    ports:
      - "6379:6379"
    env_file:
      - .env.production

  yroom_worker_prod:
    networks:
      - notetify-net-prod
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        - REQUIREMENTS_FILE=requirements_prod.txt
    depends_on:
      redis_prod:
        condition: service_healthy
      db_prod:
        condition: service_healthy
      backend_prod:
        condition: service_started
    entrypoint: []
    env_file:
      - .env.production
    command: "python manage.py yroom"

  nginx:
    networks:
      - notetify-net-prod
    image: nginx:stable-alpine
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: notetify-nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      backend_prod:
          condition: service_started
    env_file:
      - .env.production

networks:
  notetify-net-prod:
    driver: bridge

volumes:
  db-data-prod: {}
  redis-data-prod: {}

