services:
  db:
    networks:
      - notetify-net
    image: mysql:latest
    container_name: notetify_db
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MYSQL_ROOT_PASSWORD}",
        ]
      timeout: 10s
      retries: 10
    restart: always
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "3307:3306"
    env_file:
      - .env.development

  redis:
    networks:
      - notetify-net
    image: redis:latest
    container_name: notetify_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 10
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - "redis-data:/data"
    expose:
      - 6379
    ports:
      - "6379:6379"
    env_file:
      - .env.development

  yroom_worker:
    #networks:
     # - notetify-net
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements_dev.txt
    # depends_on:
    #  redis:
    # condition: service_started
    #db:
    #  condition: service_healthy
    entrypoint: []
    command: "python manage.py yroom"
    env_file:
      - .env

  backend:
    networks:
      - notetify-net
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
      args:
        - REQUIREMENTS_FILE=requirements.txt
    command: sh ./entrypoint.dev.sh
    container_name: notetify-backend
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.development

  frontend:
    networks:
      - notetify-net
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: notetify-frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - ./frontend:/usr/src/app
      - node_modules_frontend:/usr/src/app/node_modules
    stdin_open: true
    tty: true
    command: ["sh", "entrypoint.sh"]
    env_file:
      - .env.development

networks:
  notetify-net:
    driver: bridge

volumes:
  redis-data: {}
  db-data: {}
  node_modules_frontend: {}
